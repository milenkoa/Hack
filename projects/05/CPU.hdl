// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    
    //D-register:
    And(a=instruction[4], b=instruction[15], out=DRegLoad);
    DRegister(in=DRegIn, load=DRegLoad, out=DRegOut);
     
    //A-register Circuitry
    // Multiplexer that feeds A-register either from instruction @value
    // or from ALU output A=cccc;jjj command
    Mux16(a[15]=false, a[0..14]=instruction[0..14], b=ALUOut, sel=instruction[15], out=ARegIn);
    //Mux16(a=ALUOutput, b[0]=false, b[1..15]=instruction[1..15], sel=instruction[0], out=ARegIn);
    //A-register load control bit
    Not(in=instruction[15], out=notInstruction15);
    Or(a=instruction[5], b=notInstruction15, out=ALoadC);
    // A-register chip:
    ARegister(in=ARegIn, load=ALoadC, out=ARegOut);
    //feeds CPU addressM output from A-register
    And16(a=ARegOut, b=true, out[15]=outAdressMPartIgnored, out[0..14]=addressM);
    
    
    // ALU circuitry
    //feeds ALU with either A or M depending on instruction
    Mux16(a=ARegOut, b=inM, sel=instruction[12], out=AorMRegOut);
    //ALU-Arithmetic Logic Unit chip
    ALU(x=DRegOut, y=AorMRegOut, 
    zx=instruction[11],
    nx=instruction[10],
    zy=instruction[9],
    ny=instruction[8],
    f=instruction[7],
    no=instruction[6],
    out=ALUOut, zr=ALUzr, ng=ALUng);
    //feeds CPU outM from ALU output
    And16(a=ALUOut, b=true, out=outM);
    And16(a=ALUOut, b=true, out=DRegIn);
    
    //feeds CPU writeM pin
    And(a=instruction[3], b=instruction[15], out=writeM);
    
    //Program counter circuitry
    //PC chip:
    PC(in=ARegOut, load=PCLoadControl, inc=PCIncControl, reset=reset, out[0]=PCOutPinIgnored, out[0..14]=pc);
    //PC Inc Control signal: increment is done if 
    //    A-instruction 
    // or 
    //    C-instruction with no jump: J1J2J3=000 or PCLoadControl is false)
    Not(in=instruction[0], out=notJ1);
    Not(in=instruction[1], out=notJ2);
    Not(in=instruction[2], out=notJ3);
    Not(in=instruction[15], out=notOp);
    And(a=notJ1, b=notJ2, out=notJ1andnotJ2);
    And(a=notJ3, b=notJ1andnotJ2, out=notJ1andnotJ2andnotJ3);
    Not(in=PCLoadControl, out=notPCLoadControl);
    Or(a=notJ1andnotJ2andnotJ3, b=notPCLoadControl, out=noJump);
    Or(a=notOp, b=noJump, out=PCIncControl);
    //PC Load Control signal: load is done if C-instruction according to j1j2j3 and ALU zr and ng signals
    //Not(in=ALUng, out=NotALUng);
    //And(a=instruction[0], b=NotALUng, out=PCLoadTemp1);
    //And(a=instruction[1], b=ALUzr, out=PCLoadTemp2);
    //And(a=instruction[2], b=ALUng, out=PCLoadTemp3);
    //And(a=instruction[0], b=instruction[1], out=PCLoadTemp4Temp);
    //And(a=PCLoadTemp4Temp, b=instruction[2], out=PCLoadTemp4);
    //Or(a=PCLoadTemp1, b=PCLoadTemp2, out=PCLoad1);
    //Or(a=PCLoadTemp3, b=PCLoadTemp4, out=PCLoad2);
    //Or(a=PCLoad1, b=PCLoad2, out=PCLoadControlTemp); 
    //And(a=instruction[15], b=PCLoadControlTemp, out=PCLoadControl);
    Not(in=ALUng, out=notALUng);
    Not(in=ALUzr, out=notALUzr);
    
    And(a=instruction[1], b=ALUzr, out=j2);
    
    And(a=instruction[2], b=ALUng, out=j1);
    
    
    And(a=instruction[0], b=notALUzr, out=j3Temp);
    And(a=j3Temp, b=notALUng, out=j3);
    
   //And(a=instruction[0], b=notALUng, out=j3);
    Or(a=j1, b=j2, out=j1ORj2);
    Or(a=j1ORj2, b=j3, out=j1ORj2ORj3);
    And(a=instruction[15], b=j1ORj2ORj3, out=PCLoadControl);     
}